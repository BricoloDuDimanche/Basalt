buildscript {
    ext.kotlin_version = '1.3.21'
    ext.kotlin_coroutines = '1.1.1'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "kotlin"

def versionObj = new Version(major: 0, minor: 4, revision: 0)

allprojects {
    group 'bot.bricolo.basalt'
    version versionObj.toString()
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://dl.bintray.com/natanbc/maven' }
}

dependencies {
    api 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.json:json:20180813'
    compile 'redis.clients:jedis:3.1.0-m1'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.squareup.okhttp3:okhttp:3.13.0'
    implementation 'com.github.natanbc:andesite-api:0.17.2'
}

import org.apache.tools.ant.filters.ReplaceTokens

//noinspection GroovyAssignabilityCheck
task sourcesForRelease(type: Copy) {
    outputs.upToDateWhen { false }

    from('src/main/kotlin') {
        include '**/Version.java'
        filter(ReplaceTokens, tokens: [
                VERSION_MAJOR   : versionObj.major,
                VERSION_MINOR   : versionObj.minor,
                VERSION_REVISION: versionObj.revision,
                COMMIT          : getCommitHash(),
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

//noinspection GroovyAssignabilityCheck
task generateJavaSources(type: SourceTask) {
    outputs.upToDateWhen { false }

    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'Version.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    outputs.upToDateWhen { false }

    source = generateJavaSources.source
    dependsOn generateJavaSources
}

jar {
    // Add shit
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

class Version {
    String major, minor, revision

    String toString() {
        "$major.$minor.$revision"
    }
}

static def getCommitHash() {
    def p = Runtime.getRuntime().exec("git rev-parse HEAD")
    p.waitFor()
    p.getIn().text.trim()
}
